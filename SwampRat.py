################################################################################
# Developer: John Weis
# Execution Name: SwampRat.py
# Program Name: Swamp Rat
# Version Number: 0.1
# Development Date: 13 May 2020
# Latest Update: 28 May 2020
# Program Purpose: Security Tool for scanning open network ports, detecting services running on those ports, determine if services are vulnerable to known CVEs, attempting to log into them with default credentials
# Current Branch Name: 00001-feature-tcp-port-scanner
# Initial Branch Name: 00001-feature-tcp-port-scanner
# Git Link: https://github.com/weisje/SwampRat.git
################################################################################

#*IMPORT BLOCK BEGIN*(23/05/2020 -JW)
from datetime import datetime
import os
from queue import Queue
import socket
#import subprocess
import sys
import threading
import time
#*IMPORT BLOCK END*(23/05/2020 -JW)

#*GLOBAL LAMBDA BLOCK BEGIN*(13/05/2020 -JW)
sleep = lambda x: time.sleep(x)
#GLOBAL LAMBDA BLOCK END*(13/05/2020 -JW)

#*CLASS BLOCK BEGIN*(28/05/2020 -JW)

# #
# class Foo:
#   """"""
#   def __init__(self):
#       pass

#Class for storing all the types of common port configurations. MORE INFO DURING DEVELOPMENT (28/05/2020 -JW)
class Ports:
    """Class for storing all the types of common port configurations"""

    def __init__(self,portSelect):
      self.portSelect = portSelect
      #Table C-1 of [1] (28/05/2020 -JW)
      self.wellKnownPorts = [1,5,7,9,11,13,17,18,19,20,21,22,23,25,37,39,42,43,49,50,
      53,63,67,68,69,70,71,72,73,79,80,88,95,101,102,105,107,109,110,111,
      113,115,117,119,123,137,138,139,143,161,162,163,164,174,177,178,179,191,194,199,
      201,202,204,206,209,210,213,220,245,347,363,369,370,372,389,427,434,435,443,444,
      445,464,468,487,488,496,500,535,538,546,547,554,563,565,587,610,611,612,631,636,
      674,694,749,750,765,767,873,992,993,994,995] #[1] (28/05/2020 -JW)

      #Table C-2 of [1] (28/05/2020 -JW)
      self.unixSpecificPorts = [515,519,521,525,532,548,556] #Ports that can run TCP or UDP and have the same service regardless of the protocol running. [1] (28/05/2020 -JW)
      self.unixSpecificHybridPorts = self.portCloner(self.unixSpecificPorts, [512,513,514,520]) #Ports that can run TCP or UDP, but provide different services depending on whether or not it runs TCP or UDP. [1] (28/05/2020 -JW)
      self.unixSpecificTCPPorts = self.portCloner(self.unixSpecificHybridPorts, [526,530,531,540,543,544]) #Ports that can only run TCP. [1] (28/05/2020 -JW)
      self.unixSpecificUDPPorts = self.portCloner(self.unixSpecificHybridPorts, [517,518,533]) #Ports that can only run UDP. [1] (28/05/2020 -JW)

      #Table C-3 of [1] (28/05/2020 -JW)
      self.registeredPorts = [1080,1236,1300,1433,1434,1494,1512,1524,1525,1645,1646,1649,1701,1718,1719,1720,1758,1789,1812,1813,
      1911,1985,1986,1997,2049,2102,2103,2104,2401,2600,2601,2602,2603,2604,2605,2606,2809,3130,3306,3346,
      4011,4321,4444,5002,5308,5999,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,9876,10080,11371,
      11720,13720,13721,13722,13724,13782,13783,22273,26000,26208,33434] #Registered Ports that can run TCP or UDP and have the same service regardless of the protocol running. [1] (28/05/2020 -JW)
      self.registeredHybridPorts = self.portCloner(self.registeredPorts, [2430,2431,2433]) # [1] (28/05/2020 -JW)
      self.registeredTCPPorts = self.portCloner(self.registeredHybridPorts, [6000]) # [1] (28/05/2020 -JW)
      self.registeredUDPPorts = self.portCloner(self.registeredHybridPorts, [1759,2432]) # [1] (28/05/2020 -JW)

      #Table C-4 of [1] (28/05/2020 -JW)
      self.AppleTalkDDPPorts = [1,2,4,6] # [1] (28/05/2020 -JW)

      #Table C-5 of [1] (28/05/2020 -JW)
      self.kerberosPorts = [751,752,754,760,1109,2053,2105] # [1] (28/05/2020 -JW)

      #Table C-6 of [1] (28/05/2020 -JW)
      self.unregisteredRedHatEnterprisePorts = [106,808,953,2150,2988,3455,5432,5232,5354,5355,6667,8008,8080,8081,9359,10081,20011,20012,24554,27374,
      60177,60179] # [1] (28/05/2020 -JW)
      self.unregisteredRedHatEnterpriseTCPPorts = self.portCloner(self.unregisteredRedHatEnterprisePorts,[15,98,465,616,871,901,1127,1178,1313,1529,2003,3128,4557,4559,5680,6010,7100,7666,9100,10082,
      10083,22305,22289,22321]) # [1] (28/05/2020 -JW)

      self.topTenTCPPorts = [80,23,443,21,22,25,3389,110,445,139] #[2] (28/05/2020 -JW)
      self.topTwentyTCPPorts = self.portCloner(self.topTenTCPPorts,[143,53,135,3306,8080,1723,111,995,993,5900]) #[2] (28/05/2020 -JW)
      self.topFiftyTCPPorts = self.portCloner(self.topTwentyTCPPorts, [1025,587,8888,199,1720,465,548,113,81,6001,10000,514,5060,179,1026,2000,8443,8000,32768,554,
      26,1433,49152,2001,515,8008,49154,1027,5666,646]) #[2] (28/05/2020 -JW)
      self.topHundredTCPPorts = self.portCloner(self.topFiftyTCPPorts, [5000,5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,990,5357,427,49156,543,
      544,5101,144,7,389,8009,3128,444,9999,5009,7070,5190,3000,5432,1900,3986,13,1029,9,5051,
      6646,49157,1028,873,1755,2717,4899,9100,119,37]) #[2] (28/05/2020 -JW)
      self.topFiveHundredTCPPorts = self.portCloner(self.topHundredTCPPorts, [1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,5050,19,8031,1041,255,1048,1049,1053,
      1054,1056,1064,1065,2967,3703,17,808,3689,1031,1044,1071,5901,100,9102,1039,2869,4001,5120,8010,
      9000,2105,636,1038,2601,1,7000,1066,1069,625,311,280,254,4000,1761,5003,2002,1998,2005,1032,
      1050,6112,3690,1521,2161,1080,6002,2401,902,4045,787,7937,1058,2383,32771,1033,1040,1059,50000,5555,
      10001,1494,3,593,2301,3268,7938,1022,1234,1035,1036,1037,1074,8002,9001,464,497,1935,2003,6666,
      6543,24,1352,3269,1111,407,500,20,2006,1034,1218,3260,15000,4444,264,33,2004,1042,42510,999,
      3052,1023,222,1068,888,7100,563,1717,992,2008,32770,7001,32772,2007,8082,5550,512,1043,2009,5801,
      1700,2701,7019,50001,4662,2065,42,2010,161,2602,3333,9535,5100,2604,4002,5002,1047,1051,1052,1055,
      1060,1062,1311,2702,3283,4443,5225,5226,6059,6789,8089,8192,8193,8194,8651,8652,8701,9415,9593,9594,
      9595,16992,16993,20828,23502,32769,33354,35500,52869,55555,55600,64623,64680,65000,65389,1067,13782,366,5902,9050,
      85,1002,5500,1863,1864,5431,8085,10243,45100,49999,51103,49,90,6667,1503,6881,27000,340,1500,8021,
      2222,5566,8088,8899,9071,1501,5102,6005,9101,9876,32773,32774,163,5679,146,648,1666,901,83,3476,
      5004,5214,8001,8083,8084,9207,14238,30,912,12345,2030,2605,6,541,4,1248,3005,8007,306,880,
      2500,1086,1088,1097,2525,4242,8291,9009,52822,900,6101,2809,7200,211,800,987,1083,12000,32775,705,
      711,20005,6969,13783,1045,1046,1057,1061,1063,1070,1072,1073,1075,1077,1078,1079,1081,1082,1085,1093,
      1094,1096,1098,1099,1100,1104,1106,1107,1108,1148,1169,1272,1310,1687,1718,1783,1840,1947,2100,2119,
      2135,2144,2160,2190,2260,2381,2399,2492,2607,2718,2811,2875,3017,3031,3071,3211,3300,3301,3323,3325,
      3351,3367,3404,3551,3580,3659,3766,3784,3801,3827,3998,4003,4126,4129,4449,5030,5222,5269,5414,5633,
      5718,5810,5825,5877,5910,5911,5925,5959,5960,5961,5962,5987,5988,5989,6123,6129,6156,6389,6580,6788,
      6901,7106,7625,7627,7741,7777,7778,7911,8086,8087,8181,8222,8333,8400,8402,8600,8649,8873,8994,9002]) #[2] (28/05/2020 -JW)
      self.topOneThousandTCPPorts = self.portCloner(self.topFiveHundredTCPPorts,[9010,9011,9080,9220,9290,9485,9500,9502,9503,9618,9900,9968,10002,10012,10024,10025,10566,10616,10617,10621,
      10626,10628,10629,11110,11967,13456,14000,14442,15002,15003,15660,16001,16016,16018,17988,19101,19801,19842,20000,20031,
      20221,20222,21571,22939,24800,25734,27715,28201,30000,30718,31038,32781,32782,33899,34571,34572,34573,40193,48080,49158,
      49159,49160,50003,50006,50800,57294,58080,60020,63331,65129,89,691,212,1001,1999,2020,32776,2998,6003,7002,
      50002,32,898,2033,3372,5510,99,425,749,5903,43,458,5405,6106,6502,7007,13722,1087,1089,1124,
      1152,1183,1186,1247,1296,1334,1580,1782,2126,2179,2191,2251,2522,3011,3030,3077,3261,3369,3370,3371,
      3493,3546,3737,3828,3851,3871,3880,3918,3995,4006,4111,4446,5054,5200,5280,5298,5822,5859,5904,5915,
      5922,5963,7103,7402,7435,7443,7512,8011,8090,8100,8180,8254,8500,8654,9091,9110,9666,9877,9943,9944,
      9998,10004,10778,15742,16012,18988,19283,19315,19780,24444,27352,27353,27355,32784,49163,49165,49175,50389,50636,51493,
      55055,56738,61532,61900,62078,1021,9040,32777,32779,616,666,700,2021,32778,84,545,1112,1524,2040,4321,
      5802,38292,49400,1084,1600,2048,2111,3006,32780,2638,6547,6699,9111,16080,555,667,720,801,1443,1533,
      2034,2106,5560,6007,1090,1091,1114,1117,1119,1122,1131,1138,1151,1175,1199,1201,1271,1862,2323,2393,
      2394,2608,2725,2909,3003,3168,3221,3322,3324,3390,3517,3527,3800,3809,3814,3826,3869,3878,3889,3905,
      3914,3920,3945,3971,4004,4005,4279,4445,4550,4567,4848,4900,5033,5061,5080,5087,5221,5440,5544,5678,
      5730,5811,5815,5850,5862,5906,5907,5950,5952,6025,6100,6510,6565,6566,6567,6689,6692,6779,6792,6839,
      7025,7496,7676,7800,7920,7921,7999,8022,8042,8045,8093,8099,8200,8290,8292,8300,8383,8800,9003,9081,
      9099,9200,9418,9575,9878,9898,9917,10003,10009,10180,10215,11111,12174,12265,14441,15004,16000,16113,17877,18040,
      18101,19350,25735,26214,27356,30951,32783,32785,40911,41511,44176,44501,49161,49167,49176,50300,50500,52673,52848,54045,
      54328,55056,56737,57797,60443,70,417,617,714,722,777,981,1009,2022,4224,4998,6346,301,524,668,
      765,1076,2041,5999,10082,259,416,1007,1417,1434,1984,2038,2068,4343,6009,7004,44443,109,687,726,
      911,1010,1461,2035,2046,4125,6006,7201,9103,125,481,683,903,1011,1455,2013,2043,2047,6668,6669,
      256,406,783,843,2042,2045,5998,9929,31337,44442,1092,1095,1102,1105,1113,1121,1123,1126,1130,1132,
      1137,1141,1145,1147,1149,1154,1163,1164,1165,1166,1174,1185,1187,1192,1198,1213,1216,1217,1233,1236,
      1244,1259,1277,1287,1300,1301,1309,1322,1328,1556,1583,1594,1641,1658,1688,1719,1721,1805,1812,1839,
      1875,1914,1971,1972,1974,2099,2170,2196,2200,2288,2366,2382,2557,2710,2800,2910,2920,2968,3007,3013]) #[2] (28/05/2020 -JW)

      self.topTenUDPPorts = [631,161,137,123,138,1434,445,135,67,53] #[2] (28/05/2020 -JW)
      self.topTwentyUDPPorts = self.portCloner(self.topTenUDPPorts,[139,500,68,520,1900,4500,514,49152,162,69]) #[2] (28/05/2020 -JW)
      self.topFiftyUDPPorts = self.portCloner(self.topTwentyUDPPorts,[5353,111,49154,1701,998,996,997,999,3283,49153,1812,136,2222,2049,32768,5060,1025,1433,3456,80,
      20031,1026,7,1646,1645,593,518,2048,626,1027]) #[2] (28/05/2020 -JW)
      self.topHundredUDPPorts = self.portCloner(self.topFiftyUDPPorts,[177,1719,427,497,4444,1023,65024,19,9,49193,1029,49,88,1028,17185,1718,49186,2000,31337,49192,
      49201,515,2223,443,49181,1813,120,158,49200,3703,32815,17,5000,32771,33281,1030,623,1022,32769,5632,
      10000,49156,49182,49191,49194,9200,30718,49185,49188,49190]) #[2] (28/05/2020 -JW)
      self.topFiveHundredUDPPorts = self.portCloner(self.topHundredUDPPorts, [49211,5001,5355,32770,34555,34861,37444,1032,3130,4045,1031,49158,49196,37,2967,4000,989,3659,4672,34862,
      23,49162,49187,49189,49195,2148,41524,10080,32772,407,42,33354,1034,49180,49199,1001,3389,6346,21,13,
      517,1068,990,1041,1045,1782,6001,19283,49171,49179,49184,49202,49205,49208,49209,49210,9876,39213,800,389,
      464,1036,1038,1039,1419,192,199,44968,1008,49159,49166,1024,1033,19682,22986,22,2002,664,1021,11487,
      49163,49165,49168,49172,58002,1043,683,1019,1044,1049,1885,3052,5093,5351,6000,7938,5500,16680,27892,32773,
      35777,41058,113,49160,49169,49174,52225,685,686,1047,1056,1886,6004,8193,38293,782,786,38037,32774,780,
      1080,32775,682,983,1014,1054,1066,2051,6970,6971,9950,781,5050,16832,16947,18449,19120,19503,19616,20019,
      20126,20389,21383,22846,22996,25375,27195,28547,29823,30303,30365,31073,31681,31891,33355,42172,32779,49167,49175,49198,
      49204,49212,49213,49215,52503,53571,5002,27015,5003,7000,513,1485,684,1037,1048,1065,1090,1761,9103,32777,
      539,434,767,54321,3401,112,512,1000,6347,363,32818,32931,33744,34125,34892,35438,36206,39888,40116,40441,
      40708,40732,40915,41081,41370,42508,45441,47624,38,776,32776,49157,49161,49170,49173,49176,49197,49207,49503,50612,
      51717,54281,56141,58631,58640,61370,62287,63555,64513,217,775,1012,643,687,688,829,902,959,1035,1040,
      1042,1064,1069,1901,2160,3702,8001,8181,9020,9199,16402,16430,16918,17091,17455,17459,17573,17615,17616,17888,
      17939,17989,18004,18234,18331,18360,18582,18835,18980,19017,19039,19130,19165,19197,19294,19322,19332,19489,19600,19687,
      19933,20004,20359,21131,21212,21261,21298,21354,21621,21803,21902,22055,22341,22692,22695,22739,22799,22914,23040,23176,
      23354,23531,23557,23608,23679,23781,23965,23980,24007,24279,24511,24594,24606,24644,24854,24910,25003,25157,25240,25280,
      25337,25462,25541,25546,25709,25931,26407,26415,26720,26872,26966,27473,27482,27707,27899,28122,28369,28465,28493,28543,
      28641,28840,28973,29078,29243,29256,29810,29977,30263,30544,30656,30697,30704,30975,31059,31109,31189,31195,31365,31625,
      31731,32345,32385,32528,1346,20,2,32780,772,1214,1993,402,773,31335,774,814,838,903,965,1007,
      1046,1050,1053,1055,1057,1060,1081,1100,1105,1124,1234,1804,2343,3664,6002,6050,8000,8010,9000,9001]) #[2] (28/05/2020 -JW)
      self.topOneThousandUDPPorts = self.portCloner(self.topFiveHundredUDPPorts, [9877,1059,1524,5555,5010,32778,27444,32798,33030,33249,33459,33717,33866,33872,34038,34079,34358,34422,34433,34570,
      34577,34578,34579,34580,34758,34796,34855,35702,35794,36108,36384,36458,36489,36669,36778,36893,36945,37144,37212,37393,
      37602,37761,37783,37813,37843,38063,38412,38498,38615,39217,39632,39683,39714,39723,40019,40539,40622,40711,40724,40805,
      40847,40866,41308,41446,41638,41702,41774,41896,41967,41971,42056,42313,42431,42434,42557,42577,42627,42639,43094,43195,
      43370,43514,43686,43824,43967,44101,44160,44179,44185,44190,44253,44334,44508,44923,44946,45247,45380,45685,45722,45818,
      45928,46093,46532,46836,47765,47772,47808,47915,47981,48078,48189,48255,48455,48489,48761,1484,3,1067,49155,49177,
      49178,49214,49216,49220,49222,49226,49259,49262,49306,49350,49360,49393,49396,49640,49968,50099,50164,50497,50708,50919,
      51255,51456,51554,51586,51690,51905,51972,52144,53006,53037,53589,53838,54094,54114,54711,54807,54925,55043,55544,55587,
      57172,57409,57410,57813,57843,57958,57977,58075,58178,58419,58797,59193,59207,59765,59846,60172,60381,60423,61024,61142,
      61319,61322,61412,61481,61550,61685,61961,62154,62575,62677,62699,62958,63420,64080,64481,64590,64727,1058,4666,559,
      3457,1455,4008,207,764,1457,639,657,689,789,826,944,1013,1020,1051,1070,1072,1087,1088,1101,
      1200,2161,2345,2362,3296,3343,8900,9370,16086,502,16420,16433,16449,16498,16503,16545,16548,16573,16674,16697,
      16700,16708,16711,16739,16766,16779,16786,16816,16829,16838,16839,16862,16896,16912,16919,16938,16939,16948,16970,16972,
      16974,17006,17018,17077,17101,17146,17184,17205,17207,17219,17236,17237,17282,17302,17321,17331,17332,17338,17359,17417,
      17423,17424,17468,17487,17490,17494,17505,17533,17549,17580,17585,17592,17605,17629,17638,17663,17673,17674,17683,17726,
      17754,17762,17787,17814,17823,17824,17836,17845,17946,18081,18113,18134,18156,18228,18250,18255,18258,18319,18373,18485,
      18543,18605,18617,18666,18669,18676,18683,18807,18818,18821,18830,18832,18869,18883,18888,18958,18985,18987,18991,18994,
      18996,19022,19047,19075,19096,19140,19141,19154,19161,19181,19193,19222,19227,19273,19315,19374,19415,19482,19500,19504,
      19541,19605,19624,19625,19632,19639,19647,19650,19660,19662,19663,19683,19695,19707,19717,19718,19719,19722,19728,19789,
      19792,19935,19936,19956,19995,19998,20003,20082,20117,20120,20129,20146,20154,20164,20206,20217,20249,20262,20279,20288,
      20309,20313,20326,20360,20366,20380,20409,20411,20423,20424,20425,20445,20449,20464,20465,20518,20522,20525,20540,20560,
      20665,20678,20679,20710,20717,20742,20752,20762,20791,20817,20842,20848,20851,20865,20872,20876,20884,20919,21000,21016,
      21060,21083,21104,21111,21167,21186,21206,21207,21247,21282,21303,21318,21320,21333,21344,21358,21360,21364,21366,21405,
      21454,21468,21476,21514,21524,21525,21556,21566,21568,21576,21609,21625,21644,21649,21655,21663,21674,21698,21702,21710,
      21742,21780,21784,21800,21834,21842,21847,21868,21898,21923,21948,21967,22029,22043,22045,22053,22105,22109,22123,22124]) #[2] (28/05/2020 -JW)

    def portCloner(self, originalPortList, newPortList):
        #**VARIABLE BLOCK BEGIN** (28/05/2020 -JW)
        oldList = originalPortList
        addList = newPortList
        newList = []
        #**VARIABLE BLOCK END** (28/05/2020 -JW)

        newList.extend(oldList)
        newList.extend(addList)
        return newList
#*CLASS BLOCK END*(28/05/2020 -JW)

#*FUNCTION BLOCK BEGIN*(28/05/2020 -JW)

## Expected return data:
# def foo():
#    """"""
#     #**VARIABLE BLOCK BEGIN**
#
#     #**VARIABLE BLOCK END**
#     pass

# Function for creating logo when the program is ran and prints it to the console. Function does not recieve data.  Expected return data: None (28/05/2020 -JW)
def logo():

        print("\n\n")
        print("""
      ██████  █     █░ ▄▄▄       ███▄ ▄███▓ ██▓███      ██▀███   ▄▄▄     ▄▄▄█████▓
    ▒██    ▒ ▓█░ █ ░█░▒████▄    ▓██▒▀█▀ ██▒▓██░  ██▒   ▓██ ▒ ██▒▒████▄   ▓  ██▒ ▓▒
    ░ ▓██▄   ▒█░ █ ░█ ▒██  ▀█▄  ▓██    ▓██░▓██░ ██▓▒   ▓██ ░▄█ ▒▒██  ▀█▄ ▒ ▓██░ ▒░
      ▒   ██▒░█░ █ ░█ ░██▄▄▄▄██ ▒██    ▒██ ▒██▄█▓▒ ▒   ▒██▀▀█▄  ░██▄▄▄▄██░ ▓██▓ ░
    ▒██████▒▒░░██▒██▓  ▓█   ▓██▒▒██▒   ░██▒▒██▒ ░  ░   ░██▓ ▒██▒ ▓█   ▓██▒ ▒██▒ ░
    ▒ ▒▓▒ ▒ ░░ ▓░▒ ▒   ▒▒   ▓▒█░░ ▒░   ░  ░▒▓▒░ ░  ░   ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░ ▒ ░░
    ░ ░▒  ░ ░  ▒ ░ ░    ▒   ▒▒ ░░  ░      ░░▒ ░          ░▒ ░ ▒░  ▒   ▒▒ ░   ░
    ░  ░  ░    ░   ░    ░   ▒   ░      ░   ░░            ░░   ░   ░   ▒    ░
          ░      ░          ░  ░       ░                  ░           ░  ░
                                                                                  """)
        print("""

                 __             _,-"~^"-.
               _// )      _,-"~`         `.
             ." ( /`"-,-"`                 ;
            / 6                             ;
           /           ,             ,-"     ;
          (,__.--.      \           /        ;
           //'   /`-.\   |          |        `._________
             _.-'_/`  )  )--...,,,___\     \-----------,)
           ((("~` _.-'.-'           __`-.   )         //
                 ((("`             (((---~"`         //
                                                    ((________________
                                                    `----/"/"/"/"~~~~^^^```
    """)

# Function for clearing the console when running operations.  Will attempt to determine the operating system and send the proper clear command to the terminal.  Function does not recieve data.  Expected return value: None (28/05/2020 -JW)
def clear():
    '''Function for clearing the console when running operations.  Will attempt to check if the operating system is Windows & send the proper clear command to the terminal.
    Function does not accept any arguments or return any values'''
    #**VARIABLE BLOCK BEGIN**(13/05/2020 -JW)
    sendCommand = 'clear'
    #**VARIABLE BLOCK END**(13/05/2020 -JW)

    if sys.platform == "win32":
        sendCommand = 'cls'
    try:
        os.system(sendCommand)
    except:
        pass

#Function for adding new ports to existing core ones before creating a new list.  Expected return value: List of items. '[1,2,3]', '['a','b','c']' '['ABC', 1, 2, 3]' (28/05/2020 -JW)


def main():
    #**VARIABLE BLOCK BEGIN**(13/05/2020 -JW)

    #**VARIABLE BLOCK END**(13/05/2020 -JW)
    pass
#*FUNCTION BLOCK END*(28/05/2020 -JW)

if __name__ == '__main__':
    logo()
    main()
    sys.exit(0)

###############################################################################
# Notes:
#
# -Version Goals:
#   0.1 - Successfully scan for open TCP/UDP Ports across a range of IP Addresses and report the results
#
# -Sources:
# [1] “Appendix C. Common Ports,” Common Ports. [Online]. Available: https://web.mit.edu/rhel-doc/4/RH-DOCS/rhel-sg-en-4/ch-ports.html. [Accessed: 28-May-2020].
# [2] nmap-services ports sorted by open-frequency.  Available in nmap file location of PC.  [Accessed: 28-May-2020].
###############################################################################
